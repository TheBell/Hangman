<project name="Hangman" default="all" basedir=".">
    <description>
        Build file for hangman project.
    </description>
    
    <!-- set global properties for this build -->
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="lib" location="lib"/>
    <property name="doc" location="doc"/>
    <property name="test" location="test"/>
    <property name="stylecheck" location="stylecheck"/>
    <property name="coverage" location="coverage"/>
	
	<!-- cobertura directories -->
	<property name="cobertura.dir" location="lib/cobertura"/>
	<property name="coverage.dir" location="coverage"/>
	<property name="classes.dir" location="coverage/classes"/>
	<property name="instrumented.dir" location="coverage/instrumented"/>
	<property name="coverage.reports.dir" location="coverage/reports"/>
	<property name="coverage.reports.junit.xml.dir" location="coverage/reports/junit-xml"/>
	<property name="coverage.reports.junit.html.dir" location="coverage/reports/junit-html"/>
	<property name="coverage.xml.dir" location="coverage/reports//cobertura-xml"/>
	<property name="coverage.summaryxml.dir" location="coverage/reports/cobertura-summary-xml"/>
	<property name="coverage.html.dir" location="coverage/reports/cobertura-html"/>
	 <path id="classpath">
	    <fileset dir="${lib}" includes="**/*.jar"/>
	  </path>
	
	<!-- ================================= 
          target: all              
         ================================= -->
    <target name="all" depends="clean, doc, report, checkstyle, coverage"
	   description="Compiles the project and creates reports"/>
	
    <!-- ================================= 
          target: init              
         ================================= -->
    <target name="init" description="Creates build directory">
        <tstamp/>
    	<mkdir dir="{build}"/>
    </target>
	
	<!-- ================================= 
          target: build              
         ================================= -->
    <target name="build" depends="init" description="Builds the project">
        <javac srcdir="${src}" destdir="${build}" classpathref="classpath"/>
    </target>
    
    <!-- ================================= 
	      target: doc              
	     ================================= -->
    <target name="doc" depends="init"  description="Generate the docs">
    	<mkdir dir="${doc}"/>
    	<javadoc access="private" destdir="${doc}" classpathref="classpath" encoding="cp1252" additionalparam="-Xdoclint:none">
    		   <fileset dir="${src}" casesensitive="yes" defaultexcludes="yes" excludes="**/design/**">
    		    <filename name="**/*.java"/>
    	       </fileset>
    		   <link href="http://download.oracle.com/javase/8/docs/api/" />
    	</javadoc>
    </target>
	
	<!-- ================================= 
          target: test              
         ================================= -->
    <target name="test" depends="build" description="Runs junit tests">
        <mkdir dir="${test}"/>
    	<mkdir dir="${reports}"/>
        <junit printsummary="withOutAndErr" haltonfailure="no" showoutput="true">
          <classpath>
            <path refid="classpath"/>
            <path location="${build}"/>
          </classpath>
          <formatter type="xml"/>
          <formatter type="plain" usefile="false" />
          <formatter type="plain"/>
          <batchtest fork="yes" todir="${reports}">
            <fileset dir="${src}" includes="*Test.java"/>
          </batchtest>
        </junit>
    </target>

	
	<!-- ================================= 
          target: report              
         ================================= -->
    <target name="report" depends="test" description="Format junit test results">
        <junitreport todir="${reports}">
            <fileset dir="${reports}"/>
        	<report todir="${reports}"/>
        </junitreport>
    	<echo></echo>
    	<echo>Report root: ${reports}/index.html</echo>
    </target>

	
	<!-- ================================= 
          target: checkstyle              
         ================================= -->
    <target name="checkstyle" depends="init" description="Generate checkstyle report">
    	<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
    	         classpath="${lib}/checkstyle.jar" />
    	    <!-- Verify installation -->
    	    <available file="${lib}/checkstyle.jar"
    	           property="checkstyle.available" />
    	    <fail unless="checkstyle.available"
    	      message="Error: checkstyle.jar not found." />
    	    <available file="${lib}/jp_checks.xml"
    	           property="checks.available" />
    	    <fail unless="checks.available"
    	      message="Error: jp_checks.xml not found." />
    	    <!-- Create the checkstyle results directory structure -->
    	    <mkdir dir="${stylecheck}"/>
    	    <!-- Run checkstyle and save results in ${stylecheck} -->
    	    <checkstyle config="${lib}/jp_checks.xml"
    	        failureProperty="checkstyle.failure"
    	        failOnViolation="false" >
    	      <fileset dir="${src}" includes="**/*.java" excludes="**/design/**" />
    	      <formatter type="plain" />
    	      <formatter type="xml" tofile="${stylecheck}/checkstyle_report.xml" />
    	    </checkstyle>
    	    <xslt  in="${stylecheck}/checkstyle_report.xml"
    	       out="${stylecheck}/checkstyle_report.html"
    	       style="${lib}/checkstyle.xsl" />
    	    <!-- copy file="${lib}/checkstyle-logo.png" todir="${stylecheck}"/ --> 
    </target>

	 <!-- Cobertura -->
	  <path id="cobertura.classpath">
	    <fileset dir="${cobertura.dir}">
	      <include name="cobertura*.jar"/>
	      <include name="lib/**/*.jar"/>
	    </fileset>
	    <fileset dir="${lib}" includes="**/*.jar"/>
	  </path>
	  <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
	
	<!-- ================================= 
         target: coverturaInit              
        ================================= -->  
	<target name="coberturaInit, coverturaCompile">
	    <mkdir dir="${coverage.dir}"/>
	    <mkdir dir="${classes.dir}"/>
	    <mkdir dir="${instrumented.dir}"/>
	    <mkdir dir="${coverage.reports.dir}"/>
	    <mkdir dir="${coverage.reports.junit.xml.dir}"/>
	    <mkdir dir="${coverage.reports.junit.html.dir}"/>
	    <mkdir dir="${coverage.xml.dir}"/>
	    <mkdir dir="${coverage.summaryxml.dir}"/>
	    <mkdir dir="${coverage.html.dir}"/>
	  </target>
	  <target name="coberturaCompile" depends="coberturaInit">
	    <javac srcdir="${src}" destdir="${classes.dir}" debug="yes" excludes="**/design/**">
	      <classpath refid="cobertura.classpath"/>
	    </javac>
	  </target>
	  <target name="coberturaInstrument" depends="coberturaInit, coberturaCompile">
	    <!-- Remove the coverage data file and any old instrumentation. -->
	    <delete file="cobertura.ser"/>
	    <delete dir="${instrumented.dir}" />
	    <!-- Instrument the application classes, writing to ${instrumented.dir}. -->
	    <cobertura-instrument todir="${instrumented.dir}">
	      <!-- Ignore any source line with reference to slf4j/logback. -->
	      <ignore regex="org.slf4j.*" />
	      <fileset dir="${classes.dir}">
	    <!-- Instrument all application classes, not test classes. -->
	    <include name="**/*.class" />
	    <exclude name="**/*Test.class" />
	      </fileset>
	    </cobertura-instrument>
	  </target>
	  <target name="coberturaTest" depends="coberturaInit, coberturaCompile">
	    <junit fork="yes" dir="${basedir}" failureProperty="test.failed">
	      <!--
	      Note the classpath order: instrumented classes must be before
	      original (uninstrumented) classes.  This is important!
	      -->
	      <classpath location="${instrumented.dir}" />
	      <classpath location="${classes.dir}" />
	      <!--
	      The instrumented classes reference classes used by the
	      Cobertura runtime, so Cobertura and its dependencies
	      must be in the classpath.
	      -->
	      <classpath refid="cobertura.classpath" />
	      <formatter type="xml" />
	      <test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
	      <batchtest todir="${coverage.reports.junit.xml.dir}" unless="testcase">
	    <fileset dir="${src}">
	      <include name="**/*Test.java" />
	    </fileset>
	      </batchtest>
	    </junit>
	    <junitreport todir="${coverage.reports.junit.xml.dir}">
	      <fileset dir="${coverage.reports.junit.xml.dir}">
	    <include name="TEST-*.xml" />
	      </fileset>
	      <report format="frames" todir="${coverage.reports.junit.html.dir}" />
	    </junitreport>
	  </target>
	  <target name="coberturaCoverageCheck">
	    <cobertura-check branchrate="34" totallinerate="100"/>
	  </target>
	  <target name="coberturaCoverageReport">
	    <!-- Generate XML file with coverage data using "srcdir" attribute. -->
	    <cobertura-report srcdir="${src}" destdir="${coverage.xml.dir}" format="xml"/>
	  </target>
	  <target name="coberturaSummaryCoverageReport">
	    <!-- Generate summary XML file with coverage data using "srcdir" attribute. -->
	    <cobertura-report srcdir="${src}" destdir="${coverage.summaryxml.dir}" format="summaryXml" />
	  </target>
	  <target name="coberturaAlternateCoverageReport">
	    <!-- Generate HTML files with coverage data using nested source filesets. -->
	    <cobertura-report destdir="${coverage.html.dir}">
	      <fileset dir="${src}">
	    <include name="**/*.java"/>
	      </fileset>
	    </cobertura-report>
	    <echo></echo>
	    <echo>Coverage Report root: ${coverage.html.dir}/index.html</echo>
	  </target>

    <!-- ================================= 
          target: coverage              
         ================================= -->  
	<target name="coverage"
	      depends="coberturaCompile, coberturaInstrument, coberturaTest, coberturaCoverageReport, coberturaSummaryCoverageReport, coberturaAlternateCoverageReport"
	      description="Compile, instrument, run tests, and generate JUnit and coverage reports."/>
	
    <!-- ================================= 
          target: clean              
         ================================= -->	
	<target name="clean" description="Cleans up">
	    <delete dir="${dist}"/>
	    <delete dir="${doc}"/>
	    <delete dir="${reports}"/>
	    <delete dir="${test}"/>
	    <delete dir="${stylecheck}"/>
	    <delete dir="${coverage.dir}"/>
	    <delete dir="${classes.dir}" />
	    <delete dir="${instrumented.dir}" />
	    <delete dir="${coverage.reports.dir}" />
	    <delete file="cobertura.log" />
	    <delete file="cobertura.ser" />
	  </target>

	
</project>